""" 
    actions = ["METHOD_BODY   ‚ü∂   ['STATEMENT_LIST']", "STATEMENT_LIST   ‚ü∂   ['STATEMENT', 'STATEMENT_LIST_2']",
    "STATEMENT   ‚ü∂   ['DECLARATION']", 'DECLARATION   ‚ü∂   [\'PRIMITIVE_TYPE\', "\'id\'", "\';\'"]',
    'PRIMITIVE_TYPE   ‚ü∂   ["\'int\'"]', "Match : 'int'", "Match : 'id'", "Match : ';'",
    "STATEMENT_LIST_2   ‚ü∂   ['STATEMENT', 'STATEMENT_LIST_2']", "STATEMENT   ‚ü∂   ['ASSIGNMENT']",
    'ASSIGNMENT   ‚ü∂   ["\'id\'", "\'assign\'", \'EXPRESSION\', "\';\'"]', "Match : 'id'", "Match : 'assign'",
    "EXPRESSION   ‚ü∂   ['SIMPLE_EXPRESSION', 'EXPRESSION_2']", "SIMPLE_EXPRESSION   ‚ü∂   ['TERM', 'SIMPLE_EXPRESSION_2']",
    "TERM   ‚ü∂   ['FACTOR', 'TERM_2']", 'FACTOR   ‚ü∂   ["\'num\'"]', "Match : 'num'", 'TERM_2   ‚ü∂   not found',
    'SIMPLE_EXPRESSION_2   ‚ü∂   not found', 'EXPRESSION_2   ‚ü∂   not found', "Match : ';'",
    "STATEMENT_LIST_2   ‚ü∂   ['STATEMENT', 'STATEMENT_LIST_2']",
    "STATEMENT   ‚ü∂   ['DECLARATION']", 'DECLARATION   ‚ü∂   [\'PRIMITIVE_TYPE\', "\'id\'", "\';\'"]',
    'PRIMITIVE_TYPE   ‚ü∂   ["\'float\'"]', "Match : 'float'", "Match : 'id'", "Match : ';'",
    "STATEMENT_LIST_2   ‚ü∂   ['STATEMENT', 'STATEMENT_LIST_2']", "STATEMENT   ‚ü∂   ['ASSIGNMENT']",
    'ASSIGNMENT   ‚ü∂   ["\'id\'", "\'assign\'", \'EXPRESSION\', "\';\'"]', "Match : 'id'", "Match : 'assign'",
    "EXPRESSION   ‚ü∂   ['SIMPLE_EXPRESSION', 'EXPRESSION_2']", "SIMPLE_EXPRESSION   ‚ü∂   ['TERM', 'SIMPLE_EXPRESSION_2']",
    "TERM   ‚ü∂   ['FACTOR', 'TERM_2']", 'FACTOR   ‚ü∂   ["\'id\'"]', "Match : 'id'", 'TERM_2   ‚ü∂   not found',
    'SIMPLE_EXPRESSION_2   ‚ü∂   ["\'addop\'", \'TERM\', \'SIMPLE_EXPRESSION_2\']', "Match : 'addop'",
    "TERM   ‚ü∂   ['FACTOR', 'TERM_2']", 'FACTOR   ‚ü∂   ["\'id\'"]', "Match : 'id'",
    'TERM_2   ‚ü∂   ["\'mulop\'", \'FACTOR\', \'TERM_2\']', "Match : 'mulop'", 'FACTOR   ‚ü∂   ["\'num\'"]', "Match : 'num'",
    'TERM_2   ‚ü∂   not found', 'SIMPLE_EXPRESSION_2   ‚ü∂   not found', 'EXPRESSION_2   ‚ü∂   not found', "Match : ';'",
    "STATEMENT_LIST_2   ‚ü∂   ['STATEMENT', 'STATEMENT_LIST_2']", "STATEMENT   ‚ü∂   ['IF']",
    'IF   ‚ü∂   ["\'if\'", "\'(\'", \'EXPRESSION\', "\')\'", "\'{\'", \'STATEMENT\', "\'}\'", "\'else\'", "\'{\'", \'STATEMENT\', "\'}\'"]',
    "Match : 'if'", "Match : '('", "EXPRESSION   ‚ü∂   ['SIMPLE_EXPRESSION', 'EXPRESSION_2']",
    "SIMPLE_EXPRESSION   ‚ü∂   ['TERM', 'SIMPLE_EXPRESSION_2']", "TERM   ‚ü∂   ['FACTOR', 'TERM_2']",
    'FACTOR   ‚ü∂   ["\'id\'"]', "Match : 'id'", 'TERM_2   ‚ü∂   not found', 'SIMPLE_EXPRESSION_2   ‚ü∂   not found',
    'EXPRESSION_2   ‚ü∂   ["\'relop\'", \'SIMPLE_EXPRESSION\']', "Match : 'relop'",
    "SIMPLE_EXPRESSION   ‚ü∂   ['TERM', 'SIMPLE_EXPRESSION_2']", "TERM   ‚ü∂   ['FACTOR', 'TERM_2']", 'FACTOR   ‚ü∂   ["\'num\'"]',
    "Match : 'num'", 'TERM_2   ‚ü∂   not found', 'SIMPLE_EXPRESSION_2   ‚ü∂   not found', "Match : ')'", "Match : '{'",
    "STATEMENT   ‚ü∂   ['ASSIGNMENT']", 'ASSIGNMENT   ‚ü∂   ["\'id\'", "\'assign\'", \'EXPRESSION\', "\';\'"]', "Match : 'id'",
    "Match : 'assign'", "EXPRESSION   ‚ü∂   ['SIMPLE_EXPRESSION', 'EXPRESSION_2']",
    "SIMPLE_EXPRESSION   ‚ü∂   ['TERM', 'SIMPLE_EXPRESSION_2']", "TERM   ‚ü∂   ['FACTOR', 'TERM_2']",
    'FACTOR   ‚ü∂   ["\'num\'"]', "Match : 'num'", 'TERM_2   ‚ü∂   not found', 'SIMPLE_EXPRESSION_2   ‚ü∂   not found',
    'EXPRESSION_2   ‚ü∂   not found', "Match : ';'", "Match : '}'", "Match : 'else'", "Match : '{'",
    "STATEMENT   ‚ü∂   ['ASSIGNMENT']", 'ASSIGNMENT   ‚ü∂   ["\'id\'", "\'assign\'", \'EXPRESSION\', "\';\'"]', "Match : 'id'",
    "Match : 'assign'", "EXPRESSION   ‚ü∂   ['SIMPLE_EXPRESSION', 'EXPRESSION_2']",
    "SIMPLE_EXPRESSION   ‚ü∂   ['TERM', 'SIMPLE_EXPRESSION_2']", "TERM   ‚ü∂   ['FACTOR', 'TERM_2']",
    'FACTOR   ‚ü∂   ["\'num\'"]', "Match : 'num'", 'TERM_2   ‚ü∂   not found', 'SIMPLE_EXPRESSION_2   ‚ü∂   not found',
    'EXPRESSION_2   ‚ü∂   not found', "Match : ';'", "Match : '}'", "STATEMENT_LIST_2   ‚ü∂   ['STATEMENT', 'STATEMENT_LIST_2']",
    "STATEMENT   ‚ü∂   ['WHILE']",
    'WHILE   ‚ü∂   ["\'while\'", "\'(\'", \'EXPRESSION\', "\')\'", "\'{\'", \'STATEMENT\', "\'}\'"]', "Match : 'while'",
    "Match : '('", "EXPRESSION   ‚ü∂   ['SIMPLE_EXPRESSION', 'EXPRESSION_2']",
    "SIMPLE_EXPRESSION   ‚ü∂   ['TERM', 'SIMPLE_EXPRESSION_2']", "TERM   ‚ü∂   ['FACTOR', 'TERM_2']", 'FACTOR   ‚ü∂   ["\'id\'"]',
    "Match : 'id'", 'TERM_2   ‚ü∂   not found', 'SIMPLE_EXPRESSION_2   ‚ü∂   not found',
    'EXPRESSION_2   ‚ü∂   ["\'relop\'", \'SIMPLE_EXPRESSION\']', "Match : 'relop'",
    "SIMPLE_EXPRESSION   ‚ü∂   ['TERM', 'SIMPLE_EXPRESSION_2']", "TERM   ‚ü∂   ['FACTOR', 'TERM_2']",
    'FACTOR   ‚ü∂   ["\'num\'"]', "Match : 'num'", 'TERM_2   ‚ü∂   not found', 'SIMPLE_EXPRESSION_2   ‚ü∂   not found',
    "Match : ')'", "Match : '{'", "STATEMENT   ‚ü∂   ['ASSIGNMENT']",
    'ASSIGNMENT   ‚ü∂   ["\'id\'", "\'assign\'", \'EXPRESSION\', "\';\'"]', "Match : 'id'", "Match : 'assign'",
    "EXPRESSION   ‚ü∂   ['SIMPLE_EXPRESSION', 'EXPRESSION_2']", "SIMPLE_EXPRESSION   ‚ü∂   ['TERM', 'SIMPLE_EXPRESSION_2']",
    "TERM   ‚ü∂   ['FACTOR', 'TERM_2']", 'FACTOR   ‚ü∂   ["\'id\'"]', "Match : 'id'", 'TERM_2   ‚ü∂   not found',
    'SIMPLE_EXPRESSION_2   ‚ü∂   ["\'addop\'", \'TERM\', \'SIMPLE_EXPRESSION_2\']', "Match : 'addop'",
    "TERM   ‚ü∂   ['FACTOR', 'TERM_2']", 'FACTOR   ‚ü∂   ["\'num\'"]', "Match : 'num'", 'TERM_2   ‚ü∂   not found',
    'SIMPLE_EXPRESSION_2   ‚ü∂   not found', 'EXPRESSION_2   ‚ü∂   not found', "Match : ';'", "Match : '}'",
    'STATEMENT_LIST_2   ‚ü∂   not found', 'Match : $', 'Success']

    # modify the parsing table to adapt with this phase
    act = modify_actions(actions)
    act = post_modify_actions(act)
    act = post_modify_actions_2(act)

    # the root of the tree
    root = Node("METHOD_BODY", None)
    root.build_tree(act)

    # remove epsillon nodes
    root.simplify_it(['ùõÜ'])

    # get the input_list
    lex = ['int','y',';','y','=','5',';','float','x', ';', 'x', '=', 'y', '+', 'y','*', '2.5', ';',
            'if','(','x','<','3',')','{','y','=','7',';','}','else','{','y','=','3',';','}',
            'while','(','y','<','5',')','{','y','=','y','+','1',';','}'
    ]
    
    #print(f"len(lex)= {len(lex)}")
    
    ## add lexemes to the tree
    root.add_lexemes(lex)

    # mind that additional "" is added
    ## simplify tree >> APT
    root.simplify_it(['";"', '"{"','"}"', '"("', '")"','"if"','"else"','"while"'])

    root.update_leaves()

    #for i in root.leaves:
    #    print_green(f"leaf update: {i.name}")

    ## build the AST
    root.eliminate_exp({'"addop"', '"mulop"', '"relop"', '"assign"'})
    reduce_tree(root)

    ## build symbol table
    symtab = SymTable()
    ## eval values for each node
    get_val_2(root,symtab)
    
    #root.show_tree_2()
    
    ## eval values for conditional nodes
    get_val_virtual(root,symtab)

    #root.show_tree_2()
    #print_yellow(symtab.coolTable)

    #actual_value = None
    #correct_value = None

    #assert_it(correct_value, actual_value, case)

    case = 'test generating code [case 1]'
    ## generate the byte code
    generate_code(root, symtab)
    #root.show_tree_2(1)

    #assert_it(correct_value, actual_value, case)

    """
